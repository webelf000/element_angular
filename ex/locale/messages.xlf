<?xml version="1.0" encoding="UTF-8" ?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
  <file source-language="en-US" datatype="plaintext" original="ng2.template">
    <body>
      <trans-unit id="header-nav-item1" datatype="html">
        <source>开发指南</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/header/header.component.ts</context>
          <context context-type="linenumber">16</context>
        </context-group>
      </trans-unit>
      <trans-unit id="header-nav-item2" datatype="html">
        <source>组件</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/header/header.component.ts</context>
          <context context-type="linenumber">19</context>
        </context-group>
      </trans-unit>
      <trans-unit id="header-nav-item3" datatype="html">
        <source>项目</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/header/header.component.ts</context>
          <context context-type="linenumber">22</context>
        </context-group>
      </trans-unit>
      <trans-unit id="side-span-1" datatype="html">
        <source>版本</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/side/side.component.ts</context>
          <context context-type="linenumber">2</context>
        </context-group>
      </trans-unit>
      <trans-unit id="footer-a-1" datatype="html">
        <source>反馈建议</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/footer/footer.component.ts</context>
          <context context-type="linenumber">6</context>
        </context-group>
      </trans-unit>
      <trans-unit id="footer-a-2" datatype="html">
        <source>贡献指南</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/footer/footer.component.ts</context>
          <context context-type="linenumber">8</context>
        </context-group>
      </trans-unit>
      <trans-unit id="install-h2-1" datatype="html">
        <source>安装</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/install/install.component.ts</context>
          <context context-type="linenumber">1</context>
        </context-group>
      </trans-unit>
      <trans-unit id="install-h3-1" datatype="html">
        <source>npm 安装</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/install/install.component.ts</context>
          <context context-type="linenumber">2</context>
        </context-group>
      </trans-unit>
      <trans-unit id="install-p-1" datatype="html">
        <source>推荐使用 npm 的方式安装，它能更好地和 <x id="START_LINK" ctype="x-a"/>webpack<x id="CLOSE_LINK" ctype="x-a"/> 打包工具配合使用。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/install/install.component.ts</context>
          <context context-type="linenumber">3</context>
        </context-group>
      </trans-unit>
      <trans-unit id="install-p-2" datatype="html">
        <source>引入模块后，我们能轻易地构建一个简易页面</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/install/install.component.ts</context>
          <context context-type="linenumber">9</context>
        </context-group>
      </trans-unit>
      <trans-unit id="install-p-3" datatype="html">
        <source><x id="START_TAG_CODE" ctype="x-code"/> element-theme-default <x id="CLOSE_TAG_CODE" ctype="x-code"/> 样式库是 <x id="START_TAG_CODE" ctype="x-code"/>Element Angular<x id="CLOSE_TAG_CODE" ctype="x-code"/> 的依赖，无需再次安装。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/install/install.component.ts</context>
          <context context-type="linenumber">10</context>
        </context-group>
      </trans-unit>
      <trans-unit id="install-p-4" datatype="html">
        <source>使用 webpack 的引入方式：</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/install/install.component.ts</context>
          <context context-type="linenumber">13</context>
        </context-group>
      </trans-unit>
      <trans-unit id="install-p-5" datatype="html">
        <source>如果你使用 angular-cli，你需要样式文件在 <x id="START_TAG_CODE" ctype="x-code"/>/src/styles<x id="CLOSE_TAG_CODE" ctype="x-code"/> 引入：</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/install/install.component.ts</context>
          <context context-type="linenumber">19</context>
        </context-group>
      </trans-unit>
      <trans-unit id="install-p-6" datatype="html">
        <source>如果你自定义了一些样式编译方案，可能上述引入样式文件方式无法完成编译，请参考如下：</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/install/install.component.ts</context>
          <context context-type="linenumber">24</context>
        </context-group>
      </trans-unit>
      <trans-unit id="install-p-7" datatype="html">
        <source>如果你希望能够通过模块、异步模块、子模块来引入 element-angular，请参阅下一章</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/install/install.component.ts</context>
          <context context-type="linenumber">29</context>
        </context-group>
      </trans-unit>
      <trans-unit id="start-h2-1" datatype="html">
        <source>快速上手</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/start/start.component.ts</context>
          <context context-type="linenumber">1</context>
        </context-group>
      </trans-unit>
      <trans-unit id="start-p-1" datatype="html">
        <source>本节将介绍如何在项目中使用 Element-angular。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/start/start.component.ts</context>
          <context context-type="linenumber">2</context>
        </context-group>
      </trans-unit>
      <trans-unit id="start-h3-1" datatype="html">
        <source>创建项目</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/start/start.component.ts</context>
          <context context-type="linenumber">4</context>
        </context-group>
      </trans-unit>
      <trans-unit id="start-p-2" datatype="html">
        <source>如果你还没有一个 <x id="START_TAG_CODE" ctype="x-code"/>Angular<x id="CLOSE_TAG_CODE" ctype="x-code"/> 项目，可以考虑使用 cli 快速安装。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/start/start.component.ts</context>
          <context context-type="linenumber">5</context>
        </context-group>
      </trans-unit>
      <trans-unit id="start-h3-2" datatype="html">
        <source>根模块引入</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/start/start.component.ts</context>
          <context context-type="linenumber">10</context>
        </context-group>
      </trans-unit>
      <trans-unit id="start-p-3" datatype="html">
        <source>将 <x id="START_TAG_CODE" ctype="x-code"/>element-angular<x id="CLOSE_TAG_CODE" ctype="x-code"/> 引入根模块后，可以在任意组件中使用。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/start/start.component.ts</context>
          <context context-type="linenumber">11</context>
        </context-group>
      </trans-unit>
      <trans-unit id="start-h3-3" datatype="html">
        <source>引入单个组件</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/start/start.component.ts</context>
          <context context-type="linenumber">16</context>
        </context-group>
      </trans-unit>
      <trans-unit id="start-p-4" datatype="html">
        <source>附: 即便是引入整个库，Angular 在 Build 时也会去除未使用的代码，
  请参考 <x id="START_LINK" ctype="x-a"/>Tree shaking<x id="CLOSE_LINK" ctype="x-a"/></source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/start/start.component.ts</context>
          <context context-type="linenumber">17</context>
        </context-group>
      </trans-unit>
      <trans-unit id="language-h2-1" datatype="html">
        <source>国际化</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/language/language.component.ts</context>
          <context context-type="linenumber">1</context>
        </context-group>
      </trans-unit>
      <trans-unit id="language-p-1" datatype="html">
        <source>Element Angular 组件内部默认使用中文，若希望使用其他语言，则需要进行多语言设置。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/language/language.component.ts</context>
          <context context-type="linenumber">2</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-h2-1" datatype="html">
        <source>自定义主题</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">1</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-p-1" datatype="html">
        <source>Element-Angular 默认提供一套主题，CSS 命名采用 BEM 的风格方便使用者覆盖样式。如果你想完全替换主题色或者部分样式，可以使用下面的方法。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">2</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-h2-2" datatype="html">
        <source>仅替换主题色</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">4</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-p-2" datatype="html">
        <source>如果仅希望更换 Element 的主题色，推荐使用<x id="START_LINK" ctype="x-a"/>在线主题生成工具<x id="CLOSE_LINK" ctype="x-a"/>。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">5</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-p-3" datatype="html">
        <source>Element-Angular 默认的主题色是鲜艳、友好的蓝色。通过替换主题色，能够让 Element-Angular 的视觉更加符合具体项目的定位。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">6</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-p-4" datatype="html">
        <source>使用上述工具，可以很方便地实时预览主题色改变之后的视觉，同时它还可以基于新的主题色生成完整的样式文件包，供直接下载使用（关于如何使用下载的主题包，请参考本节「引入自定义主题」和「搭配插件按需引入组件主题」部分）。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">7</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-p-5" datatype="html">
        <source>如果希望进行除主题色之外的样式定制，请继续阅读。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">8</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-h2-3" datatype="html">
        <source>深层次的定制</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">10</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-p-6" datatype="html">
        <source>如果仅仅改变主题色不能满足你的需求，请按以下步骤进行更深层次的主题定制：</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">11</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-h3-1" datatype="html">
        <source>安装工具</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">13</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-p-7" datatype="html">
        <source>首先安装「主题生成工具」，可以全局安装或者安装在当前项目下，推荐安装在项目里，方便别人 clone 项目时能直接安装依赖并启动，这里以全局安装做演示。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">14</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-h3-2" datatype="html">
        <source>初始化变量文件</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">20</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-p-8" datatype="html">
        <source>主题生成工具安装成功后，如果全局安装可以在命令行里通过 <x id="START_TAG_CODE" ctype="x-code"/>et<x id="CLOSE_TAG_CODE" ctype="x-code"/> 调用工具，如果安装在当前目录下，
  需要通过 <x id="START_TAG_CODE" ctype="x-code"/>node_modules/.bin/et<x id="CLOSE_TAG_CODE" ctype="x-code"/> 访问到命令。执行 <x id="START_TAG_CODE" ctype="x-code"/>-i<x id="CLOSE_TAG_CODE" ctype="x-code"/> 初始化变量文件。
  默认输出到 <x id="START_TAG_CODE" ctype="x-code"/>element-variables.css<x id="CLOSE_TAG_CODE" ctype="x-code"/>，当然你可以传参数指定文件输出目录。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">21</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-p-9" datatype="html">
        <source>如果使用默认配置，执行后当前目录会有一个 <x id="START_TAG_CODE" ctype="x-code"/>element-variables.css<x id="CLOSE_TAG_CODE" ctype="x-code"/> 文件。
  内部包含了主题所用到的所有变量，它们使用 CSS4 的风格定义。大致结构如下</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">27</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-h3-3" datatype="html">
        <source>修改变量</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">33</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-p-10" datatype="html">
        <source>直接编辑 <x id="START_TAG_CODE" ctype="x-code"/>element-variables.css<x id="CLOSE_TAG_CODE" ctype="x-code"/> 文件，例如修改主题色为红色。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">34</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-h3-4" datatype="html">
        <source>编译主题</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">39</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-p-11" datatype="html">
        <source>保存文件后，到命令行里执行 <x id="START_TAG_CODE" ctype="x-code"/>et<x id="CLOSE_TAG_CODE" ctype="x-code"/> 编译主题，如果你想启用 <x id="START_TAG_CODE" ctype="x-code"/>watch<x id="CLOSE_TAG_CODE" ctype="x-code"/> 模式，
  实时编译主题，增加 <x id="START_TAG_CODE" ctype="x-code"/>-w<x id="CLOSE_TAG_CODE" ctype="x-code"/> 参数；
  如果你在初始化时指定了自定义变量文件，则需要增加 <x id="START_TAG_CODE" ctype="x-code"/>-c<x id="CLOSE_TAG_CODE" ctype="x-code"/> 参数，并带上你的变量文件名</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">40</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-h3-5" datatype="html">
        <source>引入自定义主题</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">47</context>
        </context-group>
      </trans-unit>
      <trans-unit id="theme-p-12" datatype="html">
        <source>默认情况下编译的主题目录是放在 <x id="START_TAG_CODE" ctype="x-code"/>./theme<x id="CLOSE_TAG_CODE" ctype="x-code"/> 下，你可以通过 <x id="START_TAG_CODE" ctype="x-code"/>-o<x id="CLOSE_TAG_CODE" ctype="x-code"/> 参数指定打包目录。
  像引入默认主题一样，在代码里直接引用 <x id="START_TAG_CODE" ctype="x-code"/>theme/index.css<x id="CLOSE_TAG_CODE" ctype="x-code"/> 文件即可。</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/theme/theme.component.ts</context>
          <context context-type="linenumber">48</context>
        </context-group>
      </trans-unit>
      <trans-unit id="log-span-1" datatype="html">
        <source>更新日志</source>
        <context-group purpose="location">
          <context context-type="sourcefile">app/components/guide/log/log.component.ts</context>
          <context context-type="linenumber">6</context>
        </context-group>
      </trans-unit>
    </body>
  </file>
</xliff>
